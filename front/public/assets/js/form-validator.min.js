!(function (b) {
    'use strict'
    function c(c) {
        return this.each(function () {
            var e = b(this),
                f = b.extend(
                    {},
                    a.DEFAULTS,
                    e.data(),
                    'object' == typeof c && c,
                ),
                d = e.data('bs.validator')
            ;(d || 'destroy' != c) &&
                (d || e.data('bs.validator', (d = new a(this, f))),
                'string' == typeof c && d[c]())
        })
    }
    var d = ':input:not([type="submit"], button):enabled:visible',
        a = function (e, c) {
            for (var d in ((this.$element = b(e)),
            (this.options = c),
            (c.errors = b.extend({}, a.DEFAULTS.errors, c.errors)),
            c.custom))
                if (!c.errors[d])
                    throw new Error(
                        'Missing default error message for custom validator: ' +
                            d,
                    )
            b.extend(a.VALIDATORS, c.custom),
                this.$element.attr('novalidate', !0),
                this.toggleSubmit(),
                this.$element.on(
                    'input.bs.validator change.bs.validator focusout.bs.validator',
                    b.proxy(this.validateInput, this),
                ),
                this.$element.on(
                    'submit.bs.validator',
                    b.proxy(this.onSubmit, this),
                ),
                this.$element.find('[data-match]').each(function () {
                    var a = b(this)
                    b(a.data('match')).on('input.bs.validator', function () {
                        a.val() && a.trigger('input.bs.validator')
                    })
                })
        }
    ;(a.DEFAULTS = {
        delay: 500,
        html: !1,
        disable: !0,
        custom: {},
        errors: { match: 'Does not match', minlength: 'Not long enough' },
        feedback: { success: 'glyphicon-ok', error: 'glyphicon-warning-sign' },
    }),
        (a.VALIDATORS = {
            native: function (b) {
                var a = b[0]
                return !a.checkValidity || a.checkValidity()
            },
            match: function (a) {
                var c = a.data('match')
                return !a.val() || a.val() === b(c).val()
            },
            minlength: function (a) {
                var b = a.data('minlength')
                return !a.val() || a.val().length >= b
            },
        }),
        (a.prototype.validateInput = function (c) {
            var a = b(c.target),
                d = a.data('bs.validator.errors')
            if (
                (a.is('[type="radio"]') &&
                    (a = this.$element.find(
                        'input[name="' + a.attr('name') + '"]',
                    )),
                this.$element.trigger(
                    (c = b.Event('validate.bs.validator', {
                        relatedTarget: a[0],
                    })),
                ),
                !c.isDefaultPrevented())
            ) {
                var e = this
                this.runValidators(a).done(function (f) {
                    a.data('bs.validator.errors', f),
                        f.length ? e.showErrors(a) : e.clearErrors(a),
                        (d && f.toString() === d.toString()) ||
                            ((c = f.length
                                ? b.Event('invalid.bs.validator', {
                                      relatedTarget: a[0],
                                      detail: f,
                                  })
                                : b.Event('valid.bs.validator', {
                                      relatedTarget: a[0],
                                      detail: d,
                                  })),
                            e.$element.trigger(c)),
                        e.toggleSubmit(),
                        e.$element.trigger(
                            b.Event('validated.bs.validator', {
                                relatedTarget: a[0],
                            }),
                        )
                })
            }
        }),
        (a.prototype.runValidators = function (c) {
            function f(a) {
                return (
                    c.data(a + '-error') ||
                    c.data('error') ||
                    ('native' == a && c[0].validationMessage) ||
                    g.errors[a]
                )
            }
            var e = [],
                d = b.Deferred(),
                g = this.options
            return (
                c.data('bs.validator.deferred') &&
                    c.data('bs.validator.deferred').reject(),
                c.data('bs.validator.deferred', d),
                b.each(
                    a.VALIDATORS,
                    b.proxy(function (a, d) {
                        if ((c.data(a) || 'native' == a) && !d.call(this, c)) {
                            var b = f(a)
                            ~e.indexOf(b) || e.push(b)
                        }
                    }, this),
                ),
                !e.length && c.val() && c.data('remote')
                    ? this.defer(c, function () {
                          var a = {}
                          ;(a[c.attr('name')] = c.val()),
                              b
                                  .get(c.data('remote'), a)
                                  .fail(function (b, c, a) {
                                      e.push(f('remote') || a)
                                  })
                                  .always(function () {
                                      d.resolve(e)
                                  })
                      })
                    : d.resolve(e),
                d.promise()
            )
        }),
        (a.prototype.validate = function () {
            var a = this.options.delay
            return (
                (this.options.delay = 0),
                this.$element.find(d).trigger('input.bs.validator'),
                (this.options.delay = a),
                this
            )
        }),
        (a.prototype.showErrors = function (a) {
            var c = this.options.html ? 'html' : 'text'
            this.defer(a, function () {
                var d = a.closest('.form-group'),
                    e = d.find('.help-block.with-errors'),
                    g = d.find('.form-control-feedback'),
                    f = a.data('bs.validator.errors')
                f.length &&
                    ((f = b('<ul/>')
                        .addClass('list-unstyled')
                        .append(
                            b.map(f, function (a) {
                                return b('<li/>')[c](a)
                            }),
                        )),
                    void 0 === e.data('bs.validator.originalContent') &&
                        e.data('bs.validator.originalContent', e.html()),
                    e.empty().append(f),
                    d.addClass('has-error'),
                    g.length &&
                        g.removeClass(this.options.feedback.success) &&
                        g.addClass(this.options.feedback.error) &&
                        d.removeClass('has-success'))
            })
        }),
        (a.prototype.clearErrors = function (d) {
            var a = d.closest('.form-group'),
                c = a.find('.help-block.with-errors'),
                b = a.find('.form-control-feedback')
            c.html(c.data('bs.validator.originalContent')),
                a.removeClass('has-error'),
                b.length &&
                    b.removeClass(this.options.feedback.error) &&
                    b.addClass(this.options.feedback.success) &&
                    a.addClass('has-success')
        }),
        (a.prototype.hasErrors = function () {
            return !!this.$element.find(d).filter(function () {
                return !!(b(this).data('bs.validator.errors') || []).length
            }).length
        }),
        (a.prototype.isIncomplete = function () {
            return !!this.$element
                .find(d)
                .filter('[required]')
                .filter(function () {
                    return 'checkbox' === this.type
                        ? !this.checked
                        : 'radio' === this.type
                        ? !b('[name="' + this.name + '"]:checked').length
                        : '' === b.trim(this.value)
                }).length
        }),
        (a.prototype.onSubmit = function (a) {
            this.validate(),
                (this.isIncomplete() || this.hasErrors()) && a.preventDefault()
        }),
        (a.prototype.toggleSubmit = function () {
            this.options.disable &&
                b('button[type="submit"], input[type="submit"]')
                    .filter('[form="' + this.$element.attr('id') + '"]')
                    .add(
                        this.$element.find(
                            'input[type="submit"], button[type="submit"]',
                        ),
                    )
                    .toggleClass(
                        'disabled',
                        this.isIncomplete() || this.hasErrors(),
                    )
                    .css({ 'pointer-events': 'all', cursor: 'pointer' })
        }),
        (a.prototype.defer = function (c, a) {
            return (
                (a = b.proxy(a, this)),
                this.options.delay
                    ? (window.clearTimeout(c.data('bs.validator.timeout')),
                      void c.data(
                          'bs.validator.timeout',
                          window.setTimeout(a, this.options.delay),
                      ))
                    : a()
            )
        }),
        (a.prototype.destroy = function () {
            return (
                this.$element
                    .removeAttr('novalidate')
                    .removeData('bs.validator')
                    .off('.bs.validator'),
                this.$element
                    .find(d)
                    .off('.bs.validator')
                    .removeData([
                        'bs.validator.errors',
                        'bs.validator.deferred',
                    ])
                    .each(function () {
                        var a = b(this),
                            c = a.data('bs.validator.timeout')
                        window.clearTimeout(c) &&
                            a.removeData('bs.validator.timeout')
                    }),
                this.$element.find('.help-block.with-errors').each(function () {
                    var a = b(this),
                        c = a.data('bs.validator.originalContent')
                    a.removeData('bs.validator.originalContent').html(c)
                }),
                this.$element
                    .find('input[type="submit"], button[type="submit"]')
                    .removeClass('disabled'),
                this.$element.find('.has-error').removeClass('has-error'),
                this
            )
        })
    var e = b.fn.validator
    ;(b.fn.validator = c),
        (b.fn.validator.Constructor = a),
        (b.fn.validator.noConflict = function () {
            return (b.fn.validator = e), this
        }),
        b(window).on('load', function () {
            b('form[data-bs-toggle="validator"]').each(function () {
                var a = b(this)
                c.call(a, a.data())
            })
        })
})(jQuery)
